
#include<header.h>


int CheckForLabel(char * inst , int n , int *stcounter , int lc)
{
	char labelcheck[20];
	int labelflag=0;
	int z=0,i;

	for(i=0;i<n;i++)
		{
			labelcheck[z++]=inst[i];
			if(inst[i+1]==':')
				{
					labelflag=1;
					break;
				}
		}

	labelcheck[z]='\0';

	for(i=1;i<*stcounter;i++)
		{
			if(strcmp(SymbolTable[i].name,labelcheck)==0)
				{
					SymbolTable[i].location=lc;
					return z;
				}
		}

	if(labelflag==0)
		{
			return -1;
		}
	else
		{
			strcpy(SymbolTable[*stcounter].name,labelcheck);
			SymbolTable[*stcounter].location=lc;
			(*stcounter)++;
			return z;
		}

}

int InitializeLocationCounter( char * inst , int n ,FILE* fp2)
	{
	    int lc=0,i;
	    int siz = strlen(inst)-1;
	    inst[siz]='\0';
	    int z=0;
	    char startcheck[20];

	    for(i=0;i<strlen(inst)&&inst[i]!=' ';i++)
		{
			startcheck[z++]=inst[i];
		}

	   startcheck[z]='\0';

	   if(strcmp(startcheck , "START")==0)
		{
			z++;
			for(i=z;i<strlen(inst);i++)
				{
					lc*=10;
					lc+=(inst[i]-'0');
				}

				fprintf(fp2,"\n(AD,01) (C,%d)\n",lc);
			return lc;
	    	}
	   else {
			printf("\n Error : Missing Start Assembler Directive ");
			exit(0);
			return -1;
		}
	}


int main()
{

    CreateMotTable();
    CreatePotTable();

    PoolTable[1].batch=1;

    int lc=0 , stcounter=1,j,ltcounter=1,ptcounter=1,stopcounter=0;

    char *inst=NULL;
    int len =20 , i;
    FILE* fp, *fp2 , *fp3, *fp4 , *fp5;
    fp = fopen("input.txt" , "r");
    fp2 = fopen("outputic.txt" , "w");
    fp3 = fopen("symboltab.txt" , "w");
    fp4 = fopen("literaltab.txt" , "w");
    fp5 = fopen("pooltab.txt","w");

    if(fp==NULL)
    {
        printf("\n The required file does not exist");

        return 0;
    }

    // Initializing location counter

    getline(&inst , &len , fp );

    lc=InitializeLocationCounter(inst , strlen(inst) ,fp2);




   // Iterating through each statement
    while( getline(&inst , &len , fp ) != -1)
    {
	fprintf(fp2,"%d ",lc);
        int siz = strlen(inst)-1;
        int isflag=0,lf=0;
	char label[20];
        inst[siz]='\0';
	int labelflag,z=0;




	// Checking for presence of Label
	labelflag=CheckForLabel(inst , strlen(inst),&stcounter,lc);

		if(labelflag==-1)
			i=0;
		else
			{
				i=labelflag;
				for(j=0;j<strlen(inst) && inst[j]!=':';j++)
					label[lf++]=inst[j];
				label[lf]='\0';
			}

				
				

	while(inst[i]==' ' || inst[i]==':')
		i++;



	// Finding OPCODE of Imperative Statement if present
	char is[20];
	for(;i<strlen(inst)&&inst[i]!=' ';i++)
	{
		is[z++]=inst[i];
	}

	is[z]='\0';
        for(j=0;j<11;j++)
        {
            if(strcmp(is , MotTable[j].name)==0)
                {
                    isflag=1;
                    fprintf(fp2,"(IS,%.2d) ",MotTable[j].opcode);
                    break;
                }


        }

	if(j==0)
		{	fprintf(fp2,"\n");
			lc++;
			continue;
		}
	if(j==10)
		{
			goto label;
			
		}
	if(j==7)
		{

			char bckeyword[20];
			z=0;
			while(inst[i]==' ')
				i++;


			for(;i<strlen(inst)&&inst[i]!=' ';i++)
				bckeyword[z++]=inst[i];

			bckeyword[z]='\0';

			if(strcmp(bckeyword,"LT")==0)
				{
					fprintf(fp2,"(1) ");
				}
			else if(strcmp(bckeyword,"LE")==0)
				{
					fprintf(fp2,"(2) ");
				}
			else if(strcmp(bckeyword,"EQ")==0)
				{
					fprintf(fp2,"(3) ");
				}
			else if(strcmp(bckeyword,"GT")==0)
				{
					fprintf(fp2,"(4) ");
				}
			else if(strcmp(bckeyword,"GE")==0)
				{
					fprintf(fp2,"(5) ");
				}
			else if(strcmp(bckeyword,"ANY")==0)
				{
					fprintf(fp2,"(6) ");
				}



			while(inst[i]==' ')
				i++;

			//Jumping to Label

			char label[20];
			z=0;

			for(;i<strlen(inst)&&inst[i]>='A' && inst[i]<='Z';i++)
				label[z++]=inst[i];

			label[z]='\0';
			int labelflag=0;

			for(j=1;j<stcounter;j++)
				if(strcmp(SymbolTable[j].name,label)==0)
					{
						fprintf(fp2,"(ST,%d) ",j);
						labelflag=1;
						//printf("  %d\n",lc);
						fprintf(fp2,"\n");
						lc++;

						continue;
					}

			if(labelflag==0)
					{
						strcpy(SymbolTable[stcounter].name,label);
						SymbolTable[stcounter].location=-1;
						fprintf(fp2,"(ST,%d) ",stcounter++);

						//printf("  %d \n",lc);
						fprintf(fp2,"\n");
						lc++;
						continue;
					}

		}

        if(isflag==0)
            {
		// Testing in POT Table
		//printf("AD Found");
			for(j=0;j<5;j++)
				{
					if(strcmp(is , PotTable[j].name)==0)
						{
				    			isflag=1;
				   			//printf("%s",is);
				    			break;
						}
				}


			if(isflag==1)
				{ 	fseek(fp2 , -4 , SEEK_CUR);
					
				  if(j==0)
					{
						// Found START
						fprintf(fp2,"\n Error : START Assembler Directive found twice");
					}
				  else if(j==1)
					{
						// Found ORIGIN

						fprintf(fp2,"(AD,03) ");
						while(inst[i]==' ')
							i++;

						int templc=0,templcflag=0,op2=0,op3=-1;

						char loc[20],op;


						for(;i<strlen(inst) && ((inst[i]>='A' && inst[i]<='Z') ||(inst[i]>='0' && inst[i]<='9'));i++)
							{
								loc[templc++]=inst[i];
								templcflag=1;
							}

						op=inst[i];
						i++;

						for(;i<strlen(inst) && (inst[i]!=' ');i++)
							{
								op2*=10;
								op2+=(inst[i]-'0');
							}
						//printf("%c %d" , op , op2);

						if(templcflag==0)
							{
			
								fprintf(fp2,"\n Error in ORGIN statement syntax");
							}
						else
							{
								for(j=1;j<stcounter;j++)
									if( strcmp(loc , SymbolTable[j].name)==0)
										{
											op3 = SymbolTable[j].location;
											break;
										}
							
								
								if(op3==-1)
									{
										fprintf(fp2,"\n Invalid location Specified by ORIGIN");
									}
				
								fprintf(fp2,"(ST,%d) %c (C,%d)\n", j,op , op2);
								

								if(op=='+')
									lc = op3 + op2;
								else if(op=='-')
									lc = op3 - op2;

								

								
							}

						//printf("\n");
						continue;
					}

				else if(j==2)
					{
						//Found END
						fprintf(fp2,"(AD,02) \n");
						int k;
						for(k=1;k<ltcounter;k++)
							{
								int ptflag=0;
								if( LiteralTable[k].location==-1)
									{
										if(k<PoolTable[ptcounter].batch)
											PoolTable[ptcounter].batch=k;

										int pte=0,l=0;
										ptflag=1;
										while(LiteralTable[k].name[l]<'0' || LiteralTable[k].name[l]>'9')
												l++;

										for(;l<strlen(LiteralTable[k].name) && LiteralTable[k].name[l]>='0' && LiteralTable[k].name[l]<='9';l++)

										{
											pte*=10;
											pte+=(LiteralTable[k].name[l]-'0');
										}

										LiteralTable[k].location = lc++;

										//printf("\n %d",pte);
									}

								if(ptflag==1)
									{
										++ptcounter;

									}
							}


						//Printing Symbol Table to check
						
						
						for(j=1;j<stcounter;j++)
							fprintf(fp3,"%s\t%d\n", SymbolTable[j].name , SymbolTable[j].location);


						//Printing Literal Table to check


						for(j=1;j<ltcounter;j++)
							fprintf(fp4,"%s		%d\n" , LiteralTable[j].name , LiteralTable[j].location);



						//Printing Pool Table to check


						for(j=1;j<ptcounter;j++)
							fprintf(fp5,"%d		\n" , PoolTable[j].batch);

					
						exit(0);
					}

				else if(j==3)
					{
						// Found EQU
						
						while(inst[i]==' ')
							++i;

						char eq[20];
							z=0;
						int temp,a;

						for(;i<strlen(inst)&& ((inst[i]>='A' && inst[i]<='Z') ||(inst[i]>='0' && inst[i]<='9'));i++)
							eq[z++]=inst[i];

						eq[z]='\0';

						char op;
				
						while(inst[i]==' ' && i<strlen(inst))
							++i;
						
						op = inst[i]; 
						i++;
						while(inst[i]==' ' && i<strlen(inst))
							++i;

						int val=0;

						for(;i<strlen(inst)&&inst[i]!=' ' ;i++)
							{
								val*=10;
								val+=(inst[i]-'0');
							}
							

						

						int k;
						for(k=1;k<stcounter;k++)
							if(strcmp(SymbolTable[k].name,eq)==0)
								{
									temp=SymbolTable[k].location;
									a=k;
									break;
								}

				
						for(k=1;k<stcounter;k++)
							if(strcmp(SymbolTable[k].name,label)==0)
								{
									
									SymbolTable[k].location= (op=='+')? temp+val:temp-val;
									break;
								}

							

						if(val==0)
							fprintf(fp2,"(AD,04) (ST,%d)\n",a);
						else
							fprintf(fp2,"(AD,04) (ST,%d) %c (C,%d)\n",a,op,val);
						continue;
					}

				else if(j==4)
					{
						//Found LTORG
						fprintf(fp2,"(AD,05) \n");
						int lflag=0;
						int k;
						for(k=1;k<ltcounter;k++)
							{


								if(LiteralTable[k].location==-1)
									{
										if(k<PoolTable[ptcounter].batch)
											PoolTable[ptcounter].batch=k;

										LiteralTable[k].location = lc;
										lflag=1;
										//printf(" %d \n",lc);
										lc++;
									}
							}
						if(lflag==1)
							{
								++ptcounter;
								PoolTable[ptcounter].batch=ltcounter;
							}
						continue;
					}

				}
		if(isflag==0)
				{
					
					
				char dcds[20];
				int ind=0,value=0,la=0;
				
				while(inst[i]==' ')
					i++;


				for(;i<inst[i]&&inst[i]!=' ';i++)
					{
						dcds[ind++]=inst[i];
					}

				dcds[ind]='\0';



				while(inst[i]==' ')
					i++;

				for(;i<inst[i]&&inst[i]!=' ';i++)
					{
						value*=10;
						value+=(inst[i]-'0');
					}

				if(strcmp(dcds , "DC")==0)
					{
						for(j=1;j<stcounter;j++)
							{
								if(strcmp(SymbolTable[j].name,is)==0)
									{
										SymbolTable[j].location = lc;
										lc++;
										isflag=1;
										fprintf(fp2,"(ST,%d) (DL,1) (C,%d) \n",j ,value);
										break;
									}
							}

					
						if(isflag==0)
							{
								strcpy(SymbolTable[stcounter].name,is);
								SymbolTable[stcounter++].location = lc;
								isflag=1;
								fprintf(fp2,"(ST,%d) (DL,1) (C,%d) \n",j ,value);
								lc++;
							}
					}

				if(strcmp(dcds , "DS")==0)
					{
						for(j=1;j<stcounter;j++)
							{
								if(strcmp(SymbolTable[j].name,is)==0)
									{
										SymbolTable[j].location = lc;
										lc+=(value);
										isflag=1;
										fprintf(fp2,"(ST,%d) (DL,2) (C,%d) \n",j ,value);
										break;
									}
							}

							if(isflag==0)
							{
								strcpy(SymbolTable[stcounter].name,is);
								SymbolTable[stcounter++].location = lc;
								isflag=1;
								fprintf(fp2,"(ST,%d) (DL,1) (C,%d) \n",j ,value);
								lc+=value;
							}

					}


				
				

				continue;
			
		}

			if( isflag==0)
				{
					fprintf(fp2,"\n Error in statement %s \n", inst);
				}

	    }


	//Checking for Register

	if(isflag==1 )
	{
		char registertype[20];
		int registerflag=0;
		int t=0;

		while(inst[i]==' ')
			i++;

		for(;i<strlen(inst)&&inst[i]>='A' && inst[i]<='Z' ;i++)
			{
				registertype[t++]=inst[i];
			}

		registertype[t]='\0';

		if(strcmp(registertype,"AREG")==0)
			{ 	registerflag=1;
				fprintf(fp2,"(1) ");
			}
		else if(strcmp(registertype,"BREG")==0)
			{	registerflag=1;
				fprintf(fp2,"(2) ");
			}
		else if(strcmp(registertype,"CREG")==0)
			{	registerflag=1;
				fprintf(fp2,"(3) ");
			}
		else if(strcmp(registertype,"DREG")==0)
			{	registerflag=1;
				fprintf(fp2,"(4) ");
			}


	}


	label:	while(inst[i]==' ' || inst[i]==',')
			i++;

	//Detecting Literal/Symbol

        char LitSym[20];
	int LitSymFlag=0;
	z=0;

	for(;i<strlen(inst)&&inst[i]!=' ';i++)
		{
			LitSym[z++]=inst[i];
		}

	LitSym[z]='\0';


	//Checking in Literal Table

	if(LitSym[0]=='=')
		{
			for(j=PoolTable[ltcounter-1].batch;j<ltcounter;j++)
				if(strcmp(LiteralTable[j].name,LitSym)==0)
					{

								fprintf(fp2,"(LT,%d) ",j);


						LitSymFlag=1;
					}

			if(LitSymFlag==0)
				{

					strcpy(LiteralTable[ltcounter].name,LitSym);
					LiteralTable[ltcounter].location=-1;
					fprintf(fp2,"(LT,%d) ",ltcounter++);
				}
		}
	else
	//Checking in Symbol Table
		{
			for(j=1;j<stcounter;j++)
				if(strcmp(SymbolTable[j].name,LitSym)==0)
					{

								fprintf(fp2,"(ST,%d) ",j);


						LitSymFlag=1;
					}

			if(LitSymFlag==0)
				{

					strcpy(SymbolTable[stcounter].name,LitSym);
					SymbolTable[stcounter].location=-1;
					fprintf(fp2,"(ST,%d) ",stcounter++);
				}
		}



//printf("%s",LitSym);

	//printf("%d \n",lc);
	fprintf(fp2,"\n");
	lc++;
    }

    return 0;
}
